service: mug-space-server

plugins:
  - serverless-domain-manager

custom:
  customDomain:
    domainName: api.mug-space.io
    basePath: ''
    certificateName: '*.mug-space.io'
    stage: ${opt:stage, 'prod'}
    createRoute53Record: true
    endPointType: 'regional'
    securityPolicy: tls_1_2


package:
  patterns:
    - '!.git/**'
    - '!src/**'
    - '!node_modules/@types/**'
    - '!node_modules/serverless/**'
    - '!node_modules/serverless-*/**'

provider:
  name: aws
  # architecture: arm64
  runtime: nodejs20.x
  memorySize: 512
  timeout: 900
  environment:
    STAGE: ${opt:stage, 'prod'}
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: mug-space-server-lambda-${opt:stage, 'prod'}
  ecr:
    images:
      latest:
        path: ./
        # platform: linux/amd64  ## x86으로 도커이미지 빌드
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
          Resource: "*"

  #
  # 바이너리 서비스를 위해 api gateway 설정 추가
  #
  httpApi:
    cors: true
    payload: '2.0'

functions:
  api:
    # architecture: arm64 ## arm64 플랫폼으로 서비스
    # url: true
    image:
      name: latest
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY

resources:
  Resources:
    ApiGatewayRestApi:
      Type: 'AWS::ApiGateway::RestApi'
      Properties:
        Name: ${self:service}-${opt:stage, self:provider.stage}
    ApiGatewayStage:
      Type: 'AWS::ApiGateway::Stage'
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage, self:provider.stage}
    ApiGatewayDeployment:
      Type: 'AWS::ApiGateway::Deployment'
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: ${opt:stage, self:provider.stage}
      DependsOn:
        - ApiGatewayStage